/*******************************************************************************
* Copyright (c) 2008 itemis AG and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
*******************************************************************************/

import ecore;
import xtext;

isAbstract(Grammar this) :
	JAVA org.eclipse.xtext.GrammarUtil.isAbstract(org.eclipse.xtext.Grammar);

String getFragment(emf::EObject object) :
	JAVA org.eclipse.xtext.EcoreUtil2.getURIFragment(org.eclipse.emf.ecore.EObject);
	
String getId(Grammar g) :
	JAVA org.eclipse.xtext.GrammarUtil.getLanguageId(org.eclipse.xtext.Grammar);
	
String getName(Grammar g) :
	JAVA org.eclipse.xtext.GrammarUtil.getName(org.eclipse.xtext.Grammar);
	
String getNamespace(Grammar g) :
	JAVA org.eclipse.xtext.GrammarUtil.getNamespace(org.eclipse.xtext.Grammar);

String getClasspathRelativePathToXmi(Grammar g) :
	JAVA org.eclipse.xtext.GrammarUtil.getClasspathRelativePathToXmi(org.eclipse.xtext.Grammar);

// ***********************************************************************************
// Containers

Grammar grammar(emf::EObject e) :
	JAVA org.eclipse.xtext.GrammarUtil.getGrammar(org.eclipse.emf.ecore.EObject); 

ParserRule containingParserRule(emf::EObject e) :
	JAVA org.eclipse.xtext.GrammarUtil.containingParserRule(org.eclipse.emf.ecore.EObject);
	 
Assignment containingAssignment(emf::EObject e) :
	JAVA org.eclipse.xtext.GrammarUtil.containingAssignment(org.eclipse.emf.ecore.EObject);

Group containingGroup(emf::EObject e) :
	JAVA org.eclipse.xtext.GrammarUtil.containingGroup(org.eclipse.emf.ecore.EObject);
	
List[AbstractElement] elementsBeforeThisInContainingGroup(AbstractElement e) :
	JAVA org.eclipse.xtext.GrammarUtil.elementsBeforeThisInContainingGroup(org.eclipse.xtext.AbstractElement);

// ***********************************************************************************
// Containment

List[Action] containedActions(emf::EObject o) :
	JAVA org.eclipse.xtext.GrammarUtil.containedActions(org.eclipse.emf.ecore.EObject);

List[RuleCall] containedRuleCalls(emf::EObject o) :
	JAVA org.eclipse.xtext.GrammarUtil.containedRuleCalls(org.eclipse.emf.ecore.EObject);

List[Assignment] containedAssignments(emf::EObject o) :
	JAVA org.eclipse.xtext.GrammarUtil.containedAssignments(org.eclipse.emf.ecore.EObject);
	
List[Keyword] containedKeywords(emf::EObject o) :
	JAVA org.eclipse.xtext.GrammarUtil.containedKeywords(org.eclipse.emf.ecore.EObject);


// ***********************************************************************************
// Shortcuts
	 
AbstractRule calledRule(RuleCall this) :
	JAVA org.eclipse.xtext.GrammarUtil.calledRule(org.eclipse.xtext.RuleCall);

String getReturnTypeName(AbstractRule p) :
	JAVA org.eclipse.xtext.GrammarUtil.getReturnTypeName(org.eclipse.xtext.AbstractRule);
	
Assignment containingAssignment(emf::EObject this) :
	JAVA org.eclipse.xtext.GrammarUtil.containingAssignment(org.eclipse.emf.ecore.EObject);
	
Boolean isAssigned(emf::EObject this) : 
	JAVA org.eclipse.xtext.GrammarUtil.isAssigned(org.eclipse.emf.ecore.EObject);	
	
List[LexerRule] allLexerRules(Grammar this) :
	JAVA org.eclipse.xtext.GrammarUtil.allLexerRules(org.eclipse.xtext.Grammar);

List[ParserRule] allParserRules(Grammar this) :
	JAVA org.eclipse.xtext.GrammarUtil.allParserRules(org.eclipse.xtext.Grammar);
	
List[AbstractMetamodelDeclaration] allMetamodelDeclarations(Grammar this) :
	JAVA org.eclipse.xtext.GrammarUtil.allMetamodelDeclarations(org.eclipse.xtext.Grammar);

List[AbstractRule] allRules(Grammar this) :
	JAVA org.eclipse.xtext.GrammarUtil.allRules(org.eclipse.xtext.Grammar);

String getQualifiedName(TypeRef this) :
	JAVA org.eclipse.xtext.GrammarUtil.getQualifiedName(org.eclipse.xtext.TypeRef);

Grammar getSuperGrammar(Grammar this) :
	JAVA org.eclipse.xtext.GrammarUtil.getSuperGrammar(org.eclipse.xtext.Grammar);
	
LexerRule calledLexerRule(CrossReference this) :
	JAVA org.eclipse.xtext.GrammarUtil.getCalledLexerRule(org.eclipse.xtext.CrossReference);

