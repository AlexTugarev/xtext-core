/*******************************************************************************
* Copyright (c) 2008 itemis AG and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
* committers of openArchitectureWare - initial API and implementation
*******************************************************************************/

import ecore;
import xtext;
import xtextutil; 

extension org::openarchitectureware::util::stdlib::io; 

String getID(emf::EObject object) :
	JAVA org.eclipse.xtext.GrammarUtil.getID(org.eclipse.emf.ecore.EObject);

// ***********************************************************************************
// Containers

Grammar grammar(emf::EObject e) :
	if e.metaType==Grammar then
		e
	else 
		if e.eContainer != null then
			e.eContainer.grammar()
		else
			null
; 

Grammar grammar(ResolvedType t) :
	t.metaModel.grammar()
;

Grammar grammar(MetaModel mm) :
	mm.declaration.grammar()
;

ParserRule containingParserRule(emf::EObject e) :
	if e.metaType==ParserRule then
		e
	else 
		if e.eContainer != null then
			e.eContainer.containingParserRule()
		else
			null
; 

Assignment containingAssignment(emf::EObject e) :
	if e.metaType==Assignment then
		e
	else 
		if e.eContainer != null then
			e.eContainer.containingAssignment()
		else
			null
; 

Group containingGroup(emf::EObject e) :
	if e.metaType==Group then
		e
	else 
		if e.eContainer != null then
			e.eContainer.containingGroup()
		else
			null;

// ***********************************************************************************
// Containment

List[Action] allActions(emf::EObject o) :
	o.eAllContents.typeSelect(Action)
;

List[RuleCall] allRuleCalls(emf::EObject o) :
	o.eAllContents.typeSelect(RuleCall)
;

List[Assignment] allAssignments(emf::EObject o) :
	o.eAllContents.typeSelect(Assignment)
;

List[AbstractRule] allRules(Grammar this) :
	parserRules.union(allLexerRules());


// ***********************************************************************************
// Shortcuts
	 
ParserRule calledParserRule(RuleCall this) :
	if ParserRule.isInstance(calledRule()) then calledRule();
	
AbstractRule calledRule(RuleCall this) :
	grammar().allRules().select(p | p.name == name).first()
;

String getReturnTypeName(ParserRule p) :
	if p.type != null then
		(if p.type.alias!=null then p.type.alias+'::' else '')+p.type.name 
	else 
		p.name
;
		
boolean referenced(ResolvedType t) :
	t.metaModel.referenced
;

boolean isKeywordAssignment(Assignment a) :
	Keyword.isInstance(a.terminal) || 
	a.eAllContents.forAll(e | !(RuleCall.isInstance(e)));
	
boolean isRuleAssignment(Assignment a) :
	RuleCall.isInstance(a.terminal);

boolean isParserRuleAssignment(Assignment a) :
	a.isRuleAssignment() && ((RuleCall) a.terminal).calledParserRule() != null ;
	
withoutQuotes(Keyword this) :
	value.trimFromStartAndEnd(1);

trimFromStartAndEnd(String this, Integer i) :
	this.subString(i,this.length-i);
	
isAssigned(Keyword this): isAssigned(eContainer);
isAssigned(RuleCall this) : isAssigned(eContainer);
isAssigned(Alternatives this) : isAssigned(eContainer);
isAssigned(Assignment this) : true;
isAssigned(Object this) : false;	
	
isMultipleCardinality(AbstractElement this) :
	{'*','+'}.contains(this.cardinality);

isOptional(AbstractElement this) :
	{'*','?'}.contains(this.cardinality);
	
qualifiedName(TypeRef this) :
	(alias!=null?alias+"::":"")+name;
	
// ***********************************************************************************
// Built-in lexer Rules

cached allLexerRules(Grammar this) :
	lexerRules.union(builtinRules().select(e|lexerRules.forAll(e1|e1.name != e.name))).union({anyOtherRule()}).toList().sortBy(e|e.name=='ANY_OTHER'?1:0);
		
cached allDefinedTokenTypes(Grammar this) :
	allLexerRules().tokenType.removeAll(builtinRules().tokenType);

boolean isBuiltinRule(LexerRule this) :
	builtinRules().contains(this);

LexerRule anyOtherRule() : 
	JAVA org.eclipse.xtext.BuiltinRules.BuiltinAnyOther();
	
List[LexerRule] builtinRules() :
	JAVA org.eclipse.xtext.BuiltinRules.getBuiltinLexerRules();
	

// *************************
// generic utilities

subList(List this, Object start, Object end) :
	let s = (contains(start) ? indexOf(start) : 0) :
		let e = (contains(end) ? indexOf(end) : this.size) :
			select(x|let ix = indexOf(x) : info(ix)>=info(s) && ix<=info(e));
