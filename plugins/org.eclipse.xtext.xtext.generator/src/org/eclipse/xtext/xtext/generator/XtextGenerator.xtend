/*******************************************************************************
 * Copyright (c) 2015 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
package org.eclipse.xtext.xtext.generator

import java.io.IOException
import java.io.InputStream
import java.net.URL
import java.text.SimpleDateFormat
import java.util.Date
import java.util.List
import java.util.jar.Manifest
import org.eclipse.emf.common.EMFPlugin
import org.eclipse.emf.mwe.core.WorkflowContext
import org.eclipse.emf.mwe.core.issues.Issues
import org.eclipse.emf.mwe.core.lib.AbstractWorkflowComponent2
import org.eclipse.emf.mwe.core.monitor.ProgressMonitor
import org.eclipse.xtend.lib.annotations.Accessors
import org.eclipse.xtext.XtextStandaloneSetup

/**
 * The Xtext language infrastructure generator. Can be configured with {@link IGeneratorFragment}
 * instances as well as with some properties declared via setter or adder methods.
 * 
 * <p><b>NOTE: This is a reimplementation of org.eclipse.xtext.generator.Generator</b></p>
 */
class XtextGenerator extends AbstractWorkflowComponent2 {

	static val FILE_HEADER_VAR_TIME = '${time}'
	static val FILE_HEADER_VAR_DATE = '${date}'
	static val FILE_HEADER_VAR_YEAR = '${year}'
	static val FILE_HEADER_VAR_USER = '${user}'
	static val FILE_HEADER_VAR_VERSION = '${version}'
	
	@Accessors
	String encoding = System.getProperty('file.encoding')
	
	@Accessors
	String fileHeader = "/*\n * generated by Xtext\n */"
	
	val List<IClassAnnotation> classAnnotations = newArrayList
	
	new() {
		new XtextStandaloneSetup().createInjectorAndDoEMFRegistration()
	}
	
	protected override invokeInternal(WorkflowContext ctx, ProgressMonitor monitor, Issues issues) {
		
	}
	
	/**
	 * Class annotations are used configure specific Java annotations to be added to each generated class.
	 */
	def void addClassAnnotation(IClassAnnotation annotation) {
		this.classAnnotations.add(annotation)
	}

	protected def getTransformedFileHeader() {
		var result = fileHeader
		if (result != null) {
			if (result.contains(FILE_HEADER_VAR_TIME)) {
				val dateFormat = new SimpleDateFormat('HH:mm:ss')
				val time = dateFormat.format(new Date)
				result = result.replace(FILE_HEADER_VAR_TIME, time)
			}
			if (result.contains(FILE_HEADER_VAR_DATE)) {
				val dateFormat = new SimpleDateFormat('MMM d, yyyy')
				val date = dateFormat.format(new Date)
				result = result.replace(FILE_HEADER_VAR_DATE, date)
			}
			if (result.contains(FILE_HEADER_VAR_YEAR)) {
				val dateFormat = new SimpleDateFormat('yyyy')
				val year = dateFormat.format(new Date)
				result = result.replace(FILE_HEADER_VAR_YEAR, year)
			}
			if (result.contains(FILE_HEADER_VAR_USER)) {
				val user = System.getProperty("user.name")
				if (user != null) {
					result = result.replace(FILE_HEADER_VAR_USER, user)
				}
			}
			if (result.contains(FILE_HEADER_VAR_VERSION)) {
				val version = getVersion()
				if (version != null) {
					result = result.replace(FILE_HEADER_VAR_VERSION, version)
				}
			}
		}
		return result
	}

	/**
	 * Read the exact version from the Manifest of the plugin.
	 */
	private def getVersion() {
		var InputStream is
		try {
			val url = new URL(Plugin.INSTANCE.baseURL + 'META-INF/MANIFEST.MF')
			is = url.openStream()
			val manifest = new Manifest(is)
			return manifest.getMainAttributes().getValue('Bundle-Version')
		} catch (Exception e) {
			return null;
		} finally {
			if (is != null) {
				try { is.close() }
				catch (IOException e) {}
			}
		}
	}

	/**
	 * Only needed to determine the Manifest file and its version of this plugin in standalone mode.
	 */
	private static class Plugin extends EMFPlugin {
		public static final Plugin INSTANCE = new Plugin
		private new() {
			super(#[]);
		}
		override getPluginResourceLocator() {
		}
	}
	
}