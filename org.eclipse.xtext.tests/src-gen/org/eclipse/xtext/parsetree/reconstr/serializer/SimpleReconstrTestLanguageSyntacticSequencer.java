/*
 * generated by Xtext
 */
package org.eclipse.xtext.parsetree.reconstr.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.parsetree.reconstr.services.SimpleReconstrTestLanguageGrammarAccess;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class SimpleReconstrTestLanguageSyntacticSequencer extends AbstractSyntacticSequencer {

	protected SimpleReconstrTestLanguageGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Loop1_Kw0Keyword_0_q;
	protected AbstractElementAlias match_Loop1_Kw1Keyword_3_q;
	protected AbstractElementAlias match_Loop1___Kw2Keyword_5_0_a_Kw30Keyword_5_1__p;
	protected AbstractElementAlias match_Loop2_Kw3Keyword_3_0_q;
	protected AbstractElementAlias match_Loop2_Kw5Keyword_4_0_or_Kw6Keyword_4_1;
	protected AbstractElementAlias match_Loop3_Kw1Keyword_0_0_or_Kw2Keyword_0_1_or_Kw3Keyword_0_2;
	protected AbstractElementAlias match_Loop4_Kw1Keyword_1_0_or_Kw2Keyword_1_1_or___Kw3Keyword_1_2_0_Kw4Keyword_1_2_1__;
	protected AbstractElementAlias match_Loop4___Kw5Keyword_3_0___Kw6Keyword_3_1_0_Kw7Keyword_3_1_1_q__q__p;
	protected AbstractElementAlias match_Parens_LeftParenthesisKeyword_0_a;
	protected AbstractElementAlias match_Parens_LeftParenthesisKeyword_0_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (SimpleReconstrTestLanguageGrammarAccess) access;
		match_Loop1_Kw0Keyword_0_q = new TokenAlias(false, true, grammarAccess.getLoop1Access().getKw0Keyword_0());
		match_Loop1_Kw1Keyword_3_q = new TokenAlias(false, true, grammarAccess.getLoop1Access().getKw1Keyword_3());
		match_Loop1___Kw2Keyword_5_0_a_Kw30Keyword_5_1__p = new GroupAlias(true, false, new TokenAlias(true, true, grammarAccess.getLoop1Access().getKw2Keyword_5_0()), new TokenAlias(false, false, grammarAccess.getLoop1Access().getKw30Keyword_5_1()));
		match_Loop2_Kw3Keyword_3_0_q = new TokenAlias(false, true, grammarAccess.getLoop2Access().getKw3Keyword_3_0());
		match_Loop2_Kw5Keyword_4_0_or_Kw6Keyword_4_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getLoop2Access().getKw5Keyword_4_0()), new TokenAlias(false, false, grammarAccess.getLoop2Access().getKw6Keyword_4_1()));
		match_Loop3_Kw1Keyword_0_0_or_Kw2Keyword_0_1_or_Kw3Keyword_0_2 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getLoop3Access().getKw1Keyword_0_0()), new TokenAlias(false, false, grammarAccess.getLoop3Access().getKw2Keyword_0_1()), new TokenAlias(false, false, grammarAccess.getLoop3Access().getKw3Keyword_0_2()));
		match_Loop4_Kw1Keyword_1_0_or_Kw2Keyword_1_1_or___Kw3Keyword_1_2_0_Kw4Keyword_1_2_1__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getLoop4Access().getKw3Keyword_1_2_0()), new TokenAlias(false, false, grammarAccess.getLoop4Access().getKw4Keyword_1_2_1())), new TokenAlias(false, false, grammarAccess.getLoop4Access().getKw1Keyword_1_0()), new TokenAlias(false, false, grammarAccess.getLoop4Access().getKw2Keyword_1_1()));
		match_Loop4___Kw5Keyword_3_0___Kw6Keyword_3_1_0_Kw7Keyword_3_1_1_q__q__p = new GroupAlias(true, false, new TokenAlias(false, false, grammarAccess.getLoop4Access().getKw5Keyword_3_0()), new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getLoop4Access().getKw6Keyword_3_1_0()), new TokenAlias(false, true, grammarAccess.getLoop4Access().getKw7Keyword_3_1_1())));
		match_Parens_LeftParenthesisKeyword_0_a = new TokenAlias(true, true, grammarAccess.getParensAccess().getLeftParenthesisKeyword_0());
		match_Parens_LeftParenthesisKeyword_0_p = new TokenAlias(true, false, grammarAccess.getParensAccess().getLeftParenthesisKeyword_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Loop1_Kw0Keyword_0_q.equals(syntax))
				emit_Loop1_Kw0Keyword_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Loop1_Kw1Keyword_3_q.equals(syntax))
				emit_Loop1_Kw1Keyword_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Loop1___Kw2Keyword_5_0_a_Kw30Keyword_5_1__p.equals(syntax))
				emit_Loop1___Kw2Keyword_5_0_a_Kw30Keyword_5_1__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Loop2_Kw3Keyword_3_0_q.equals(syntax))
				emit_Loop2_Kw3Keyword_3_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Loop2_Kw5Keyword_4_0_or_Kw6Keyword_4_1.equals(syntax))
				emit_Loop2_Kw5Keyword_4_0_or_Kw6Keyword_4_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Loop3_Kw1Keyword_0_0_or_Kw2Keyword_0_1_or_Kw3Keyword_0_2.equals(syntax))
				emit_Loop3_Kw1Keyword_0_0_or_Kw2Keyword_0_1_or_Kw3Keyword_0_2(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Loop4_Kw1Keyword_1_0_or_Kw2Keyword_1_1_or___Kw3Keyword_1_2_0_Kw4Keyword_1_2_1__.equals(syntax))
				emit_Loop4_Kw1Keyword_1_0_or_Kw2Keyword_1_1_or___Kw3Keyword_1_2_0_Kw4Keyword_1_2_1__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Loop4___Kw5Keyword_3_0___Kw6Keyword_3_1_0_Kw7Keyword_3_1_1_q__q__p.equals(syntax))
				emit_Loop4___Kw5Keyword_3_0___Kw6Keyword_3_1_0_Kw7Keyword_3_1_1_q__q__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Parens_LeftParenthesisKeyword_0_a.equals(syntax))
				emit_Parens_LeftParenthesisKeyword_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Parens_LeftParenthesisKeyword_0_p.equals(syntax))
				emit_Parens_LeftParenthesisKeyword_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'kw0'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '('* (ambiguity) '#8' id+=ID
	 *     (rule start) '('+ (ambiguity) '#8' id+=ID
	 *     (rule start) (ambiguity) '#8' id+=ID
	 */
	protected void emit_Loop1_Kw0Keyword_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'kw1'?
	 *
	 * This ambiguous syntax occurs at:
	 *     id+=ID (ambiguity) id+=ID
	 */
	protected void emit_Loop1_Kw1Keyword_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('kw2'* 'kw30')+
	 *
	 * This ambiguous syntax occurs at:
	 *     id+=ID (ambiguity) ')' (rule end)
	 *     id+=ID (ambiguity) ')' em='!'
	 *     id+=ID (ambiguity) (rule end)
	 */
	protected void emit_Loop1___Kw2Keyword_5_0_a_Kw30Keyword_5_1__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'kw3'?
	 *
	 * This ambiguous syntax occurs at:
	 *     id+=ID 'kw1' (ambiguity) ('kw5' | 'kw6') ')' (rule end)
	 *     id+=ID 'kw1' (ambiguity) ('kw5' | 'kw6') ')' em='!'
	 *     id+=ID 'kw1' (ambiguity) ('kw5' | 'kw6') (rule end)
	 *     id+=ID 'kw2' (ambiguity) ('kw5' | 'kw6') ')' (rule end)
	 *     id+=ID 'kw2' (ambiguity) ('kw5' | 'kw6') ')' em='!'
	 *     id+=ID 'kw2' (ambiguity) ('kw5' | 'kw6') (rule end)
	 */
	protected void emit_Loop2_Kw3Keyword_3_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'kw5' | 'kw6'
	 *
	 * This ambiguous syntax occurs at:
	 *     id+=ID 'kw1' 'kw3'? (ambiguity) ')' (rule end)
	 *     id+=ID 'kw1' 'kw3'? (ambiguity) ')' em='!'
	 *     id+=ID 'kw1' 'kw3'? (ambiguity) (rule end)
	 *     id+=ID 'kw2' 'kw3'? (ambiguity) ')' (rule end)
	 *     id+=ID 'kw2' 'kw3'? (ambiguity) ')' em='!'
	 *     id+=ID 'kw2' 'kw3'? (ambiguity) (rule end)
	 *     id+=ID 'kw4' (ambiguity) ')' (rule end)
	 *     id+=ID 'kw4' (ambiguity) ')' em='!'
	 *     id+=ID 'kw4' (ambiguity) (rule end)
	 */
	protected void emit_Loop2_Kw5Keyword_4_0_or_Kw6Keyword_4_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'kw1' | 'kw2' | 'kw3'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '('* (ambiguity) '#10' id+=ID
	 *     (rule start) '('+ (ambiguity) '#10' id+=ID
	 *     (rule start) (ambiguity) '#10' id+=ID
	 */
	protected void emit_Loop3_Kw1Keyword_0_0_or_Kw2Keyword_0_1_or_Kw3Keyword_0_2(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('kw3' 'kw4') | 'kw1' | 'kw2'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '#11' (ambiguity) id+=ID
	 *     (rule start) '('* '#11' (ambiguity) id+=ID
	 *     (rule start) '('+ '#11' (ambiguity) id+=ID
	 */
	protected void emit_Loop4_Kw1Keyword_1_0_or_Kw2Keyword_1_1_or___Kw3Keyword_1_2_0_Kw4Keyword_1_2_1__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('kw5' ('kw6' 'kw7'?)?)+
	 *
	 * This ambiguous syntax occurs at:
	 *     id+=ID (ambiguity) ')' (rule end)
	 *     id+=ID (ambiguity) ')' em='!'
	 *     id+=ID (ambiguity) (rule end)
	 */
	protected void emit_Loop4___Kw5Keyword_3_0___Kw6Keyword_3_1_0_Kw7Keyword_3_1_1_q__q__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '#11' (('kw3' 'kw4') | 'kw1' | 'kw2') id+=ID
	 *     (rule start) (ambiguity) '#12' 'class' name=ID
	 *     (rule start) (ambiguity) '#12' interface?='interface'
	 *     (rule start) (ambiguity) '#13' final?='final'
	 *     (rule start) (ambiguity) '#13' static?='static'
	 *     (rule start) (ambiguity) '#13' transient?='transient'
	 *     (rule start) (ambiguity) '#14' items=EmptyObjectItems
	 *     (rule start) (ambiguity) '#15' val=ConcreteMulti
	 *     (rule start) (ambiguity) '#16' obj=EObjectElement
	 *     (rule start) (ambiguity) '#17' 'ka' name=ID
	 *     (rule start) (ambiguity) '#17' 'kb' name=ID
	 *     (rule start) (ambiguity) '#18' 'ka' name=ID
	 *     (rule start) (ambiguity) '#18' 'kb' name=ID
	 *     (rule start) (ambiguity) '#19' 'kx' x+=ID
	 *     (rule start) (ambiguity) '#19' 'ky' y+=ID
	 *     (rule start) (ambiguity) '#19' 'kz' z+=ID
	 *     (rule start) (ambiguity) '#19' name=ID
	 *     (rule start) (ambiguity) '#2' ref2='mykeyword1'
	 *     (rule start) (ambiguity) '#2' ref2='mykeyword2'
	 *     (rule start) (ambiguity) '#2' ref2=STRING
	 *     (rule start) (ambiguity) '#20' 'kw1' lits+=EnumBug310435Lit1
	 *     (rule start) (ambiguity) '#20' 'kw2' lits+=EnumBug310435Lit2
	 *     (rule start) (ambiguity) '#21' 'kw1' lits+=ID
	 *     (rule start) (ambiguity) '#21' 'kw2' lits+=STRING
	 *     (rule start) (ambiguity) '#22' 'kw1' ')' em='!'
	 *     (rule start) (ambiguity) '#22' 'kw1' 'kw2' ref+=[CrossRefNamed|ID1]
	 *     (rule start) (ambiguity) '#22' 'kw1' 'kw3' ref+=[CrossRefNamed|ID2]
	 *     (rule start) (ambiguity) '#22' 'kw1' (rule start)
	 *     (rule start) (ambiguity) '#22' named+=CrossRefNamed
	 *     (rule start) (ambiguity) '#3' id+=ID
	 *     (rule start) (ambiguity) '#4' 'kw' value=ID
	 *     (rule start) (ambiguity) '#4' bool?='myoption'
	 *     (rule start) (ambiguity) '#5' prec=INT
	 *     (rule start) (ambiguity) '#5' precStar?='*'
	 *     (rule start) (ambiguity) '#6' 'v1' v1+=INT
	 *     (rule start) (ambiguity) '#6' 'v1' v2+=ID
	 *     (rule start) (ambiguity) '#6' 'v2' v1+=INT
	 *     (rule start) (ambiguity) '#6' 'v2' v2+=ID
	 *     (rule start) (ambiguity) '#7' child=Consumed1
	 *     (rule start) (ambiguity) '#9' id+=ID
	 *     (rule start) (ambiguity) '=' str1+=STRING
	 *     (rule start) (ambiguity) '=' str2+=STRING
	 *     (rule start) (ambiguity) 'kw0'? '#8' id+=ID
	 *     (rule start) (ambiguity) 'type' name=ID
	 *     (rule start) (ambiguity) ('kw1' | 'kw2' | 'kw3') '#10' id+=ID
	 *     (rule start) (ambiguity) name=ID
	 *     (rule start) (ambiguity) num1=INT
	 *     (rule start) (ambiguity) {Op.values+=}
	 */
	protected void emit_Parens_LeftParenthesisKeyword_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '#11' (('kw3' 'kw4') | 'kw1' | 'kw2') id+=ID
	 *     (rule start) (ambiguity) '#12' 'class' name=ID
	 *     (rule start) (ambiguity) '#12' interface?='interface'
	 *     (rule start) (ambiguity) '#13' final?='final'
	 *     (rule start) (ambiguity) '#13' static?='static'
	 *     (rule start) (ambiguity) '#13' transient?='transient'
	 *     (rule start) (ambiguity) '#14' items=EmptyObjectItems
	 *     (rule start) (ambiguity) '#15' val=ConcreteMulti
	 *     (rule start) (ambiguity) '#16' obj=EObjectElement
	 *     (rule start) (ambiguity) '#17' 'ka' name=ID
	 *     (rule start) (ambiguity) '#17' 'kb' name=ID
	 *     (rule start) (ambiguity) '#18' 'ka' name=ID
	 *     (rule start) (ambiguity) '#18' 'kb' name=ID
	 *     (rule start) (ambiguity) '#19' 'kx' x+=ID
	 *     (rule start) (ambiguity) '#19' 'ky' y+=ID
	 *     (rule start) (ambiguity) '#19' 'kz' z+=ID
	 *     (rule start) (ambiguity) '#19' name=ID
	 *     (rule start) (ambiguity) '#2' ref2='mykeyword1'
	 *     (rule start) (ambiguity) '#2' ref2='mykeyword2'
	 *     (rule start) (ambiguity) '#2' ref2=STRING
	 *     (rule start) (ambiguity) '#20' 'kw1' lits+=EnumBug310435Lit1
	 *     (rule start) (ambiguity) '#20' 'kw2' lits+=EnumBug310435Lit2
	 *     (rule start) (ambiguity) '#21' 'kw1' lits+=ID
	 *     (rule start) (ambiguity) '#21' 'kw2' lits+=STRING
	 *     (rule start) (ambiguity) '#22' 'kw1' ')' (rule start)
	 *     (rule start) (ambiguity) '#22' 'kw1' ')' em='!'
	 *     (rule start) (ambiguity) '#22' 'kw1' 'kw2' ref+=[CrossRefNamed|ID1]
	 *     (rule start) (ambiguity) '#22' 'kw1' 'kw3' ref+=[CrossRefNamed|ID2]
	 *     (rule start) (ambiguity) '#22' named+=CrossRefNamed
	 *     (rule start) (ambiguity) '#3' id+=ID
	 *     (rule start) (ambiguity) '#4' 'kw' value=ID
	 *     (rule start) (ambiguity) '#4' bool?='myoption'
	 *     (rule start) (ambiguity) '#5' prec=INT
	 *     (rule start) (ambiguity) '#5' precStar?='*'
	 *     (rule start) (ambiguity) '#6' 'v1' v1+=INT
	 *     (rule start) (ambiguity) '#6' 'v1' v2+=ID
	 *     (rule start) (ambiguity) '#6' 'v2' v1+=INT
	 *     (rule start) (ambiguity) '#6' 'v2' v2+=ID
	 *     (rule start) (ambiguity) '#7' child=Consumed1
	 *     (rule start) (ambiguity) '#9' id+=ID
	 *     (rule start) (ambiguity) '=' str1+=STRING
	 *     (rule start) (ambiguity) '=' str2+=STRING
	 *     (rule start) (ambiguity) 'kw0'? '#8' id+=ID
	 *     (rule start) (ambiguity) 'type' name=ID
	 *     (rule start) (ambiguity) ('kw1' | 'kw2' | 'kw3') '#10' id+=ID
	 *     (rule start) (ambiguity) name=ID
	 *     (rule start) (ambiguity) num1=INT
	 *     (rule start) (ambiguity) {Op.values+=}
	 */
	protected void emit_Parens_LeftParenthesisKeyword_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
