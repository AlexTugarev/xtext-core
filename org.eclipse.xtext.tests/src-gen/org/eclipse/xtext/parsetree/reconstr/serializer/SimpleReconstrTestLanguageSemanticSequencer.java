/*
 * generated by Xtext
 */
package org.eclipse.xtext.parsetree.reconstr.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.parsetree.reconstr.services.SimpleReconstrTestLanguageGrammarAccess;
import org.eclipse.xtext.parsetree.reconstr.simplerewritetest.AbstractMulti1;
import org.eclipse.xtext.parsetree.reconstr.simplerewritetest.AbstractMulti2;
import org.eclipse.xtext.parsetree.reconstr.simplerewritetest.Atom;
import org.eclipse.xtext.parsetree.reconstr.simplerewritetest.Bug305171;
import org.eclipse.xtext.parsetree.reconstr.simplerewritetest.Bug310435Enum;
import org.eclipse.xtext.parsetree.reconstr.simplerewritetest.Bug310435Val;
import org.eclipse.xtext.parsetree.reconstr.simplerewritetest.ConcreteMulti;
import org.eclipse.xtext.parsetree.reconstr.simplerewritetest.Consumed1;
import org.eclipse.xtext.parsetree.reconstr.simplerewritetest.Consumed2;
import org.eclipse.xtext.parsetree.reconstr.simplerewritetest.CrossRefNameTest;
import org.eclipse.xtext.parsetree.reconstr.simplerewritetest.CrossRefNamed;
import org.eclipse.xtext.parsetree.reconstr.simplerewritetest.DuplicateBug284491;
import org.eclipse.xtext.parsetree.reconstr.simplerewritetest.EObjectElement;
import org.eclipse.xtext.parsetree.reconstr.simplerewritetest.EObjectRef;
import org.eclipse.xtext.parsetree.reconstr.simplerewritetest.EmptyObjectBug284850;
import org.eclipse.xtext.parsetree.reconstr.simplerewritetest.EmptyObjectItem;
import org.eclipse.xtext.parsetree.reconstr.simplerewritetest.EmptyObjectItems;
import org.eclipse.xtext.parsetree.reconstr.simplerewritetest.Expression;
import org.eclipse.xtext.parsetree.reconstr.simplerewritetest.Loop1;
import org.eclipse.xtext.parsetree.reconstr.simplerewritetest.Loop2;
import org.eclipse.xtext.parsetree.reconstr.simplerewritetest.Loop3;
import org.eclipse.xtext.parsetree.reconstr.simplerewritetest.Loop4;
import org.eclipse.xtext.parsetree.reconstr.simplerewritetest.LoopBug285452;
import org.eclipse.xtext.parsetree.reconstr.simplerewritetest.ManyStrings;
import org.eclipse.xtext.parsetree.reconstr.simplerewritetest.MultiInheritanceBug280439;
import org.eclipse.xtext.parsetree.reconstr.simplerewritetest.Op;
import org.eclipse.xtext.parsetree.reconstr.simplerewritetest.Ref2;
import org.eclipse.xtext.parsetree.reconstr.simplerewritetest.SimplerewritetestPackage;
import org.eclipse.xtext.parsetree.reconstr.simplerewritetest.Spare;
import org.eclipse.xtext.parsetree.reconstr.simplerewritetest.Transient1;
import org.eclipse.xtext.parsetree.reconstr.simplerewritetest.TwoNumbers;
import org.eclipse.xtext.parsetree.reconstr.simplerewritetest.Type;
import org.eclipse.xtext.parsetree.reconstr.simplerewritetest.TypeBug1A;
import org.eclipse.xtext.parsetree.reconstr.simplerewritetest.TypeBug1B;
import org.eclipse.xtext.parsetree.reconstr.simplerewritetest.TypeBug2A;
import org.eclipse.xtext.parsetree.reconstr.simplerewritetest.TypeBug2B;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class SimpleReconstrTestLanguageSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SimpleReconstrTestLanguageGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SimplerewritetestPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SimplerewritetestPackage.ABSTRACT_MULTI1:
				sequence_AbstractMulti1(context, (AbstractMulti1) semanticObject); 
				return; 
			case SimplerewritetestPackage.ABSTRACT_MULTI2:
				sequence_AbstractMulti2(context, (AbstractMulti2) semanticObject); 
				return; 
			case SimplerewritetestPackage.ATOM:
				if (rule == grammarAccess.getAtomRule()) {
					sequence_Atom(context, (Atom) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOpRule()
						|| action == grammarAccess.getOpAccess().getOpValuesAction_1_0()
						|| rule == grammarAccess.getTermRule()
						|| rule == grammarAccess.getParensRule()) {
					sequence_Atom_Parens(context, (Atom) semanticObject); 
					return; 
				}
				else break;
			case SimplerewritetestPackage.BOOLEAN:
				if (rule == grammarAccess.getBooleanRule()) {
					sequence_Boolean(context, (org.eclipse.xtext.parsetree.reconstr.simplerewritetest.Boolean) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOpRule()
						|| action == grammarAccess.getOpAccess().getOpValuesAction_1_0()
						|| rule == grammarAccess.getTermRule()
						|| rule == grammarAccess.getParensRule()) {
					sequence_Boolean_Parens(context, (org.eclipse.xtext.parsetree.reconstr.simplerewritetest.Boolean) semanticObject); 
					return; 
				}
				else break;
			case SimplerewritetestPackage.BUG305171:
				if (rule == grammarAccess.getBug305171Rule()) {
					sequence_Bug305171(context, (Bug305171) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOpRule()
						|| action == grammarAccess.getOpAccess().getOpValuesAction_1_0()
						|| rule == grammarAccess.getTermRule()
						|| rule == grammarAccess.getParensRule()) {
					sequence_Bug305171_Parens(context, (Bug305171) semanticObject); 
					return; 
				}
				else break;
			case SimplerewritetestPackage.BUG310435_ENUM:
				if (rule == grammarAccess.getBug310435EnumRule()) {
					sequence_Bug310435Enum(context, (Bug310435Enum) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOpRule()
						|| action == grammarAccess.getOpAccess().getOpValuesAction_1_0()
						|| rule == grammarAccess.getTermRule()
						|| rule == grammarAccess.getParensRule()) {
					sequence_Bug310435Enum_Parens(context, (Bug310435Enum) semanticObject); 
					return; 
				}
				else break;
			case SimplerewritetestPackage.BUG310435_VAL:
				if (rule == grammarAccess.getBug310435ValRule()) {
					sequence_Bug310435Val(context, (Bug310435Val) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOpRule()
						|| action == grammarAccess.getOpAccess().getOpValuesAction_1_0()
						|| rule == grammarAccess.getTermRule()
						|| rule == grammarAccess.getParensRule()) {
					sequence_Bug310435Val_Parens(context, (Bug310435Val) semanticObject); 
					return; 
				}
				else break;
			case SimplerewritetestPackage.CONCRETE_MULTI:
				sequence_ConcreteMulti(context, (ConcreteMulti) semanticObject); 
				return; 
			case SimplerewritetestPackage.CONSUMED1:
				if (rule == grammarAccess.getConsumed1Rule()) {
					sequence_Consumed1(context, (Consumed1) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOpRule()
						|| action == grammarAccess.getOpAccess().getOpValuesAction_1_0()
						|| rule == grammarAccess.getTermRule()
						|| rule == grammarAccess.getParensRule()) {
					sequence_Consumed1_Parens(context, (Consumed1) semanticObject); 
					return; 
				}
				else break;
			case SimplerewritetestPackage.CONSUMED2:
				if (rule == grammarAccess.getConsumed2Rule()) {
					sequence_Consumed2(context, (Consumed2) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOpRule()
						|| action == grammarAccess.getOpAccess().getOpValuesAction_1_0()
						|| rule == grammarAccess.getTermRule()
						|| rule == grammarAccess.getParensRule()) {
					sequence_Consumed2_Parens(context, (Consumed2) semanticObject); 
					return; 
				}
				else break;
			case SimplerewritetestPackage.CROSS_REF_NAME_TEST:
				if (rule == grammarAccess.getCrossRefNameTestRule()) {
					sequence_CrossRefNameTest(context, (CrossRefNameTest) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOpRule()
						|| action == grammarAccess.getOpAccess().getOpValuesAction_1_0()
						|| rule == grammarAccess.getTermRule()
						|| rule == grammarAccess.getParensRule()) {
					sequence_CrossRefNameTest_Parens(context, (CrossRefNameTest) semanticObject); 
					return; 
				}
				else break;
			case SimplerewritetestPackage.CROSS_REF_NAMED:
				sequence_CrossRefNamed(context, (CrossRefNamed) semanticObject); 
				return; 
			case SimplerewritetestPackage.DUPLICATE_BUG284491:
				if (rule == grammarAccess.getDuplicateBug284491Rule()) {
					sequence_DuplicateBug284491(context, (DuplicateBug284491) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOpRule()
						|| action == grammarAccess.getOpAccess().getOpValuesAction_1_0()
						|| rule == grammarAccess.getTermRule()
						|| rule == grammarAccess.getParensRule()) {
					sequence_DuplicateBug284491_Parens(context, (DuplicateBug284491) semanticObject); 
					return; 
				}
				else break;
			case SimplerewritetestPackage.EOBJECT_ELEMENT:
				sequence_EObjectElement(context, (EObjectElement) semanticObject); 
				return; 
			case SimplerewritetestPackage.EOBJECT_REF:
				if (rule == grammarAccess.getEObjectRefRule()) {
					sequence_EObjectRef(context, (EObjectRef) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOpRule()
						|| action == grammarAccess.getOpAccess().getOpValuesAction_1_0()
						|| rule == grammarAccess.getTermRule()
						|| rule == grammarAccess.getParensRule()) {
					sequence_EObjectRef_Parens(context, (EObjectRef) semanticObject); 
					return; 
				}
				else break;
			case SimplerewritetestPackage.EMPTY_OBJECT_BUG284850:
				if (rule == grammarAccess.getEmptyObjectBug284850Rule()) {
					sequence_EmptyObjectBug284850(context, (EmptyObjectBug284850) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOpRule()
						|| action == grammarAccess.getOpAccess().getOpValuesAction_1_0()
						|| rule == grammarAccess.getTermRule()
						|| rule == grammarAccess.getParensRule()) {
					sequence_EmptyObjectBug284850_Parens(context, (EmptyObjectBug284850) semanticObject); 
					return; 
				}
				else break;
			case SimplerewritetestPackage.EMPTY_OBJECT_ITEM:
				sequence_EmptyObjectItem(context, (EmptyObjectItem) semanticObject); 
				return; 
			case SimplerewritetestPackage.EMPTY_OBJECT_ITEMS:
				sequence_EmptyObjectItems(context, (EmptyObjectItems) semanticObject); 
				return; 
			case SimplerewritetestPackage.EXPRESSION:
				sequence_Parens(context, (Expression) semanticObject); 
				return; 
			case SimplerewritetestPackage.LOOP1:
				if (rule == grammarAccess.getLoop1Rule()) {
					sequence_Loop1(context, (Loop1) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOpRule()
						|| action == grammarAccess.getOpAccess().getOpValuesAction_1_0()
						|| rule == grammarAccess.getTermRule()
						|| rule == grammarAccess.getParensRule()) {
					sequence_Loop1_Parens(context, (Loop1) semanticObject); 
					return; 
				}
				else break;
			case SimplerewritetestPackage.LOOP2:
				if (rule == grammarAccess.getLoop2Rule()) {
					sequence_Loop2(context, (Loop2) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOpRule()
						|| action == grammarAccess.getOpAccess().getOpValuesAction_1_0()
						|| rule == grammarAccess.getTermRule()
						|| rule == grammarAccess.getParensRule()) {
					sequence_Loop2_Parens(context, (Loop2) semanticObject); 
					return; 
				}
				else break;
			case SimplerewritetestPackage.LOOP3:
				if (rule == grammarAccess.getLoop3Rule()) {
					sequence_Loop3(context, (Loop3) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOpRule()
						|| action == grammarAccess.getOpAccess().getOpValuesAction_1_0()
						|| rule == grammarAccess.getTermRule()
						|| rule == grammarAccess.getParensRule()) {
					sequence_Loop3_Parens(context, (Loop3) semanticObject); 
					return; 
				}
				else break;
			case SimplerewritetestPackage.LOOP4:
				if (rule == grammarAccess.getLoop4Rule()) {
					sequence_Loop4(context, (Loop4) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOpRule()
						|| action == grammarAccess.getOpAccess().getOpValuesAction_1_0()
						|| rule == grammarAccess.getTermRule()
						|| rule == grammarAccess.getParensRule()) {
					sequence_Loop4_Parens(context, (Loop4) semanticObject); 
					return; 
				}
				else break;
			case SimplerewritetestPackage.LOOP_BUG285452:
				if (rule == grammarAccess.getLoopBug285452Rule()) {
					sequence_LoopBug285452(context, (LoopBug285452) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOpRule()
						|| action == grammarAccess.getOpAccess().getOpValuesAction_1_0()
						|| rule == grammarAccess.getTermRule()
						|| rule == grammarAccess.getParensRule()) {
					sequence_LoopBug285452_Parens(context, (LoopBug285452) semanticObject); 
					return; 
				}
				else break;
			case SimplerewritetestPackage.MANY_STRINGS:
				if (rule == grammarAccess.getManyStringsRule()) {
					sequence_ManyStrings(context, (ManyStrings) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOpRule()
						|| action == grammarAccess.getOpAccess().getOpValuesAction_1_0()
						|| rule == grammarAccess.getTermRule()
						|| rule == grammarAccess.getParensRule()) {
					sequence_ManyStrings_Parens(context, (ManyStrings) semanticObject); 
					return; 
				}
				else break;
			case SimplerewritetestPackage.MULTI_INHERITANCE_BUG280439:
				if (rule == grammarAccess.getMultiInheritanceBug280439Rule()) {
					sequence_MultiInheritanceBug280439(context, (MultiInheritanceBug280439) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOpRule()
						|| action == grammarAccess.getOpAccess().getOpValuesAction_1_0()
						|| rule == grammarAccess.getTermRule()
						|| rule == grammarAccess.getParensRule()) {
					sequence_MultiInheritanceBug280439_Parens(context, (MultiInheritanceBug280439) semanticObject); 
					return; 
				}
				else break;
			case SimplerewritetestPackage.OP:
				sequence_Op_Parens(context, (Op) semanticObject); 
				return; 
			case SimplerewritetestPackage.REF2:
				if (rule == grammarAccess.getOpRule()
						|| action == grammarAccess.getOpAccess().getOpValuesAction_1_0()
						|| rule == grammarAccess.getTermRule()
						|| rule == grammarAccess.getParensRule()) {
					sequence_Parens_Ref2(context, (Ref2) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRef2Rule()) {
					sequence_Ref2(context, (Ref2) semanticObject); 
					return; 
				}
				else break;
			case SimplerewritetestPackage.SPARE:
				if (rule == grammarAccess.getOpRule()
						|| action == grammarAccess.getOpAccess().getOpValuesAction_1_0()
						|| rule == grammarAccess.getTermRule()
						|| rule == grammarAccess.getParensRule()) {
					sequence_Parens_Spare(context, (Spare) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSpareRule()) {
					sequence_Spare(context, (Spare) semanticObject); 
					return; 
				}
				else break;
			case SimplerewritetestPackage.TRANSIENT1:
				if (rule == grammarAccess.getOpRule()
						|| action == grammarAccess.getOpAccess().getOpValuesAction_1_0()
						|| rule == grammarAccess.getTermRule()
						|| rule == grammarAccess.getParensRule()) {
					sequence_Parens_Transient1(context, (Transient1) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTransient1Rule()) {
					sequence_Transient1(context, (Transient1) semanticObject); 
					return; 
				}
				else break;
			case SimplerewritetestPackage.TWO_NUMBERS:
				if (rule == grammarAccess.getOpRule()
						|| action == grammarAccess.getOpAccess().getOpValuesAction_1_0()
						|| rule == grammarAccess.getTermRule()
						|| rule == grammarAccess.getParensRule()) {
					sequence_Parens_TwoNumbers(context, (TwoNumbers) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTwoNumbersRule()) {
					sequence_TwoNumbers(context, (TwoNumbers) semanticObject); 
					return; 
				}
				else break;
			case SimplerewritetestPackage.TYPE:
				if (rule == grammarAccess.getOpRule()
						|| action == grammarAccess.getOpAccess().getOpValuesAction_1_0()
						|| rule == grammarAccess.getTermRule()
						|| rule == grammarAccess.getParensRule()) {
					sequence_Parens_Type(context, (Type) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTypeRule()) {
					sequence_Type(context, (Type) semanticObject); 
					return; 
				}
				else break;
			case SimplerewritetestPackage.TYPE_BUG1_A:
				if (rule == grammarAccess.getOpRule()
						|| action == grammarAccess.getOpAccess().getOpValuesAction_1_0()
						|| rule == grammarAccess.getTermRule()
						|| rule == grammarAccess.getParensRule()) {
					sequence_Parens_TypeBug1A(context, (TypeBug1A) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTypeBug305577_1Rule()
						|| rule == grammarAccess.getTypeBug1ARule()) {
					sequence_TypeBug1A(context, (TypeBug1A) semanticObject); 
					return; 
				}
				else break;
			case SimplerewritetestPackage.TYPE_BUG1_B:
				if (rule == grammarAccess.getOpRule()
						|| action == grammarAccess.getOpAccess().getOpValuesAction_1_0()
						|| rule == grammarAccess.getTermRule()
						|| rule == grammarAccess.getParensRule()) {
					sequence_Parens_TypeBug1B(context, (TypeBug1B) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTypeBug305577_1Rule()
						|| rule == grammarAccess.getTypeBug1AInhRule()
						|| rule == grammarAccess.getTypeBug1BRule()) {
					sequence_TypeBug1B(context, (TypeBug1B) semanticObject); 
					return; 
				}
				else break;
			case SimplerewritetestPackage.TYPE_BUG2_A:
				if (rule == grammarAccess.getOpRule()
						|| action == grammarAccess.getOpAccess().getOpValuesAction_1_0()
						|| rule == grammarAccess.getTermRule()
						|| rule == grammarAccess.getParensRule()) {
					sequence_Parens_TypeBug2A(context, (TypeBug2A) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTypeBug305577_2Rule()
						|| rule == grammarAccess.getTypeBug2ARule()) {
					sequence_TypeBug2A(context, (TypeBug2A) semanticObject); 
					return; 
				}
				else break;
			case SimplerewritetestPackage.TYPE_BUG2_B:
				if (rule == grammarAccess.getOpRule()
						|| action == grammarAccess.getOpAccess().getOpValuesAction_1_0()
						|| rule == grammarAccess.getTermRule()
						|| rule == grammarAccess.getParensRule()) {
					sequence_Parens_TypeBug2B(context, (TypeBug2B) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTypeBug305577_2Rule()
						|| rule == grammarAccess.getTypeBug2AInhRule()
						|| rule == grammarAccess.getTypeBug2BRule()) {
					sequence_TypeBug2B(context, (TypeBug2B) semanticObject); 
					return; 
				}
				else break;
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AbstractMulti1 returns AbstractMulti1
	 *
	 * Constraint:
	 *     m1=ID
	 */
	protected void sequence_AbstractMulti1(ISerializationContext context, AbstractMulti1 semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimplerewritetestPackage.Literals.ABSTRACT_MULTI1__M1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimplerewritetestPackage.Literals.ABSTRACT_MULTI1__M1));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAbstractMulti1Access().getM1IDTerminalRuleCall_1_0(), semanticObject.getM1());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AbstractMulti2 returns AbstractMulti2
	 *
	 * Constraint:
	 *     m2=ID
	 */
	protected void sequence_AbstractMulti2(ISerializationContext context, AbstractMulti2 semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimplerewritetestPackage.Literals.ABSTRACT_MULTI2__M2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimplerewritetestPackage.Literals.ABSTRACT_MULTI2__M2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAbstractMulti2Access().getM2IDTerminalRuleCall_1_0(), semanticObject.getM2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Atom returns Atom
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Atom(ISerializationContext context, Atom semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimplerewritetestPackage.Literals.ATOM__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimplerewritetestPackage.Literals.ATOM__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAtomAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Op returns Atom
	 *     Op.Op_1_0 returns Atom
	 *     Term returns Atom
	 *     Parens returns Atom
	 *
	 * Constraint:
	 *     (name=ID em='!'*)
	 */
	protected void sequence_Atom_Parens(ISerializationContext context, Atom semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Boolean returns Boolean
	 *
	 * Constraint:
	 *     (bool?='myoption'? value=ID)
	 */
	protected void sequence_Boolean(ISerializationContext context, org.eclipse.xtext.parsetree.reconstr.simplerewritetest.Boolean semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Op returns Boolean
	 *     Op.Op_1_0 returns Boolean
	 *     Term returns Boolean
	 *     Parens returns Boolean
	 *
	 * Constraint:
	 *     (bool?='myoption'? value=ID em='!'*)
	 */
	protected void sequence_Boolean_Parens(ISerializationContext context, org.eclipse.xtext.parsetree.reconstr.simplerewritetest.Boolean semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Bug305171 returns Bug305171
	 *
	 * Constraint:
	 *     ((x+=ID x+=ID*)? (y+=ID y+=ID*)? (z+=ID z+=ID*)? name=ID)
	 */
	protected void sequence_Bug305171(ISerializationContext context, Bug305171 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Op returns Bug305171
	 *     Op.Op_1_0 returns Bug305171
	 *     Term returns Bug305171
	 *     Parens returns Bug305171
	 *
	 * Constraint:
	 *     ((x+=ID x+=ID*)? (y+=ID y+=ID*)? (z+=ID z+=ID*)? name=ID em='!'*)
	 */
	protected void sequence_Bug305171_Parens(ISerializationContext context, Bug305171 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Bug310435Enum returns Bug310435Enum
	 *
	 * Constraint:
	 *     (lits+=EnumBug310435Lit1 | lits+=EnumBug310435Lit2)+
	 */
	protected void sequence_Bug310435Enum(ISerializationContext context, Bug310435Enum semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Op returns Bug310435Enum
	 *     Op.Op_1_0 returns Bug310435Enum
	 *     Term returns Bug310435Enum
	 *     Parens returns Bug310435Enum
	 *
	 * Constraint:
	 *     ((lits+=EnumBug310435Lit1 | lits+=EnumBug310435Lit2)+ em='!'*)
	 */
	protected void sequence_Bug310435Enum_Parens(ISerializationContext context, Bug310435Enum semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Bug310435Val returns Bug310435Val
	 *
	 * Constraint:
	 *     (lits+=ID | lits+=STRING)+
	 */
	protected void sequence_Bug310435Val(ISerializationContext context, Bug310435Val semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Op returns Bug310435Val
	 *     Op.Op_1_0 returns Bug310435Val
	 *     Term returns Bug310435Val
	 *     Parens returns Bug310435Val
	 *
	 * Constraint:
	 *     ((lits+=ID | lits+=STRING)+ em='!'*)
	 */
	protected void sequence_Bug310435Val_Parens(ISerializationContext context, Bug310435Val semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractMulti1 returns ConcreteMulti
	 *     AbstractMulti2 returns ConcreteMulti
	 *     ConcreteMulti returns ConcreteMulti
	 *
	 * Constraint:
	 *     (m1=ID m2=ID)
	 */
	protected void sequence_ConcreteMulti(ISerializationContext context, ConcreteMulti semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimplerewritetestPackage.Literals.ABSTRACT_MULTI1__M1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimplerewritetestPackage.Literals.ABSTRACT_MULTI1__M1));
			if (transientValues.isValueTransient(semanticObject, SimplerewritetestPackage.Literals.ABSTRACT_MULTI2__M2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimplerewritetestPackage.Literals.ABSTRACT_MULTI2__M2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConcreteMultiAccess().getM1IDTerminalRuleCall_0_0(), semanticObject.getM1());
		feeder.accept(grammarAccess.getConcreteMultiAccess().getM2IDTerminalRuleCall_1_0(), semanticObject.getM2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Consumed1 returns Consumed1
	 *
	 * Constraint:
	 *     ((v1+=INT* v2+=ID) | (v2+=ID* v1+=INT))
	 */
	protected void sequence_Consumed1(ISerializationContext context, Consumed1 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Op returns Consumed1
	 *     Op.Op_1_0 returns Consumed1
	 *     Term returns Consumed1
	 *     Parens returns Consumed1
	 *
	 * Constraint:
	 *     (((v1+=INT* v2+=ID) | (v2+=ID* v1+=INT)) em='!'*)
	 */
	protected void sequence_Consumed1_Parens(ISerializationContext context, Consumed1 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Consumed2 returns Consumed2
	 *
	 * Constraint:
	 *     child=Consumed1
	 */
	protected void sequence_Consumed2(ISerializationContext context, Consumed2 semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimplerewritetestPackage.Literals.CONSUMED2__CHILD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimplerewritetestPackage.Literals.CONSUMED2__CHILD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConsumed2Access().getChildConsumed1ParserRuleCall_1_0(), semanticObject.getChild());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Op returns Consumed2
	 *     Op.Op_1_0 returns Consumed2
	 *     Term returns Consumed2
	 *     Parens returns Consumed2
	 *
	 * Constraint:
	 *     (child=Consumed1 em='!'*)
	 */
	protected void sequence_Consumed2_Parens(ISerializationContext context, Consumed2 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CrossRefNameTest returns CrossRefNameTest
	 *
	 * Constraint:
	 *     (named+=CrossRefNamed* (ref+=[CrossRefNamed|ID1] | ref+=[CrossRefNamed|ID2])*)
	 */
	protected void sequence_CrossRefNameTest(ISerializationContext context, CrossRefNameTest semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Op returns CrossRefNameTest
	 *     Op.Op_1_0 returns CrossRefNameTest
	 *     Term returns CrossRefNameTest
	 *     Parens returns CrossRefNameTest
	 *
	 * Constraint:
	 *     (named+=CrossRefNamed* (ref+=[CrossRefNamed|ID1] | ref+=[CrossRefNamed|ID2])* em='!'*)
	 */
	protected void sequence_CrossRefNameTest_Parens(ISerializationContext context, CrossRefNameTest semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CrossRefNamed returns CrossRefNamed
	 *
	 * Constraint:
	 *     (name=ID1 | name=ID2)
	 */
	protected void sequence_CrossRefNamed(ISerializationContext context, CrossRefNamed semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DuplicateBug284491 returns DuplicateBug284491
	 *
	 * Constraint:
	 *     (static?='static' | final?='final' | transient?='transient')+
	 */
	protected void sequence_DuplicateBug284491(ISerializationContext context, DuplicateBug284491 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Op returns DuplicateBug284491
	 *     Op.Op_1_0 returns DuplicateBug284491
	 *     Term returns DuplicateBug284491
	 *     Parens returns DuplicateBug284491
	 *
	 * Constraint:
	 *     ((static?='static' | final?='final' | transient?='transient')+ em='!'*)
	 */
	protected void sequence_DuplicateBug284491_Parens(ISerializationContext context, DuplicateBug284491 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EObjectElement returns EObjectElement
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_EObjectElement(ISerializationContext context, EObjectElement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimplerewritetestPackage.Literals.EOBJECT_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimplerewritetestPackage.Literals.EOBJECT_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEObjectElementAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EObjectRef returns EObjectRef
	 *
	 * Constraint:
	 *     (obj=EObjectElement ref=[EObject|ID])
	 */
	protected void sequence_EObjectRef(ISerializationContext context, EObjectRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimplerewritetestPackage.Literals.EOBJECT_REF__OBJ) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimplerewritetestPackage.Literals.EOBJECT_REF__OBJ));
			if (transientValues.isValueTransient(semanticObject, SimplerewritetestPackage.Literals.EOBJECT_REF__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimplerewritetestPackage.Literals.EOBJECT_REF__REF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEObjectRefAccess().getObjEObjectElementParserRuleCall_1_0(), semanticObject.getObj());
		feeder.accept(grammarAccess.getEObjectRefAccess().getRefEObjectIDTerminalRuleCall_3_0_1(), semanticObject.getRef());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Op returns EObjectRef
	 *     Op.Op_1_0 returns EObjectRef
	 *     Term returns EObjectRef
	 *     Parens returns EObjectRef
	 *
	 * Constraint:
	 *     (obj=EObjectElement ref=[EObject|ID] em='!'*)
	 */
	protected void sequence_EObjectRef_Parens(ISerializationContext context, EObjectRef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyObjectBug284850 returns EmptyObjectBug284850
	 *
	 * Constraint:
	 *     items=EmptyObjectItems
	 */
	protected void sequence_EmptyObjectBug284850(ISerializationContext context, EmptyObjectBug284850 semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimplerewritetestPackage.Literals.EMPTY_OBJECT_BUG284850__ITEMS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimplerewritetestPackage.Literals.EMPTY_OBJECT_BUG284850__ITEMS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEmptyObjectBug284850Access().getItemsEmptyObjectItemsParserRuleCall_1_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Op returns EmptyObjectBug284850
	 *     Op.Op_1_0 returns EmptyObjectBug284850
	 *     Term returns EmptyObjectBug284850
	 *     Parens returns EmptyObjectBug284850
	 *
	 * Constraint:
	 *     (items=EmptyObjectItems em='!'*)
	 */
	protected void sequence_EmptyObjectBug284850_Parens(ISerializationContext context, EmptyObjectBug284850 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmptyObjectItem returns EmptyObjectItem
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_EmptyObjectItem(ISerializationContext context, EmptyObjectItem semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimplerewritetestPackage.Literals.EMPTY_OBJECT_ITEM__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimplerewritetestPackage.Literals.EMPTY_OBJECT_ITEM__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEmptyObjectItemAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EmptyObjectItems returns EmptyObjectItems
	 *
	 * Constraint:
	 *     list+=EmptyObjectItem+
	 */
	protected void sequence_EmptyObjectItems(ISerializationContext context, EmptyObjectItems semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Loop1 returns Loop1
	 *
	 * Constraint:
	 *     (id+=ID id+=ID)
	 */
	protected void sequence_Loop1(ISerializationContext context, Loop1 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Op returns Loop1
	 *     Op.Op_1_0 returns Loop1
	 *     Term returns Loop1
	 *     Parens returns Loop1
	 *
	 * Constraint:
	 *     (id+=ID id+=ID em='!'*)
	 */
	protected void sequence_Loop1_Parens(ISerializationContext context, Loop1 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Loop2 returns Loop2
	 *
	 * Constraint:
	 *     (id+=ID id+=ID? id+=ID?)
	 */
	protected void sequence_Loop2(ISerializationContext context, Loop2 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Op returns Loop2
	 *     Op.Op_1_0 returns Loop2
	 *     Term returns Loop2
	 *     Parens returns Loop2
	 *
	 * Constraint:
	 *     (id+=ID id+=ID? id+=ID? em='!'*)
	 */
	protected void sequence_Loop2_Parens(ISerializationContext context, Loop2 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Loop3 returns Loop3
	 *
	 * Constraint:
	 *     (id+=ID id+=ID*)
	 */
	protected void sequence_Loop3(ISerializationContext context, Loop3 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Op returns Loop3
	 *     Op.Op_1_0 returns Loop3
	 *     Term returns Loop3
	 *     Parens returns Loop3
	 *
	 * Constraint:
	 *     (id+=ID id+=ID* em='!'*)
	 */
	protected void sequence_Loop3_Parens(ISerializationContext context, Loop3 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Loop4 returns Loop4
	 *
	 * Constraint:
	 *     id+=ID
	 */
	protected void sequence_Loop4(ISerializationContext context, Loop4 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Op returns Loop4
	 *     Op.Op_1_0 returns Loop4
	 *     Term returns Loop4
	 *     Parens returns Loop4
	 *
	 * Constraint:
	 *     (id+=ID em='!'*)
	 */
	protected void sequence_Loop4_Parens(ISerializationContext context, Loop4 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LoopBug285452 returns LoopBug285452
	 *
	 * Constraint:
	 *     (interface?='interface'? name=ID)
	 */
	protected void sequence_LoopBug285452(ISerializationContext context, LoopBug285452 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Op returns LoopBug285452
	 *     Op.Op_1_0 returns LoopBug285452
	 *     Term returns LoopBug285452
	 *     Parens returns LoopBug285452
	 *
	 * Constraint:
	 *     (interface?='interface'? name=ID em='!'*)
	 */
	protected void sequence_LoopBug285452_Parens(ISerializationContext context, LoopBug285452 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ManyStrings returns ManyStrings
	 *
	 * Constraint:
	 *     (str1+=STRING* str2+=STRING)
	 */
	protected void sequence_ManyStrings(ISerializationContext context, ManyStrings semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Op returns ManyStrings
	 *     Op.Op_1_0 returns ManyStrings
	 *     Term returns ManyStrings
	 *     Parens returns ManyStrings
	 *
	 * Constraint:
	 *     (str1+=STRING* str2+=STRING em='!'*)
	 */
	protected void sequence_ManyStrings_Parens(ISerializationContext context, ManyStrings semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MultiInheritanceBug280439 returns MultiInheritanceBug280439
	 *
	 * Constraint:
	 *     val=ConcreteMulti
	 */
	protected void sequence_MultiInheritanceBug280439(ISerializationContext context, MultiInheritanceBug280439 semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimplerewritetestPackage.Literals.MULTI_INHERITANCE_BUG280439__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimplerewritetestPackage.Literals.MULTI_INHERITANCE_BUG280439__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultiInheritanceBug280439Access().getValConcreteMultiParserRuleCall_1_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Op returns MultiInheritanceBug280439
	 *     Op.Op_1_0 returns MultiInheritanceBug280439
	 *     Term returns MultiInheritanceBug280439
	 *     Parens returns MultiInheritanceBug280439
	 *
	 * Constraint:
	 *     (val=ConcreteMulti em='!'*)
	 */
	protected void sequence_MultiInheritanceBug280439_Parens(ISerializationContext context, MultiInheritanceBug280439 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Op returns Op
	 *     Op.Op_1_0 returns Op
	 *     Term returns Op
	 *     Parens returns Op
	 *
	 * Constraint:
	 *     (values+=Op_Op_1_0 values+=Term em='!'*)
	 */
	protected void sequence_Op_Parens(ISerializationContext context, Op semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Op returns Expression
	 *     Op.Op_1_0 returns Expression
	 *     Term returns Expression
	 *     Parens returns Expression
	 *
	 * Constraint:
	 *     em='!'*
	 */
	protected void sequence_Parens(ISerializationContext context, Expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Op returns Ref2
	 *     Op.Op_1_0 returns Ref2
	 *     Term returns Ref2
	 *     Parens returns Ref2
	 *
	 * Constraint:
	 *     ((ref2='mykeyword1' | ref2=STRING | ref2='mykeyword2') em='!'*)
	 */
	protected void sequence_Parens_Ref2(ISerializationContext context, Ref2 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Op returns Spare
	 *     Op.Op_1_0 returns Spare
	 *     Term returns Spare
	 *     Parens returns Spare
	 *
	 * Constraint:
	 *     (id+=ID id+=ID* em='!'*)
	 */
	protected void sequence_Parens_Spare(ISerializationContext context, Spare semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Op returns Transient1
	 *     Op.Op_1_0 returns Transient1
	 *     Term returns Transient1
	 *     Parens returns Transient1
	 *
	 * Constraint:
	 *     ((precStar?='*' | prec=INT) (scaleStar?='*' | scale=INT)? em='!'*)
	 */
	protected void sequence_Parens_Transient1(ISerializationContext context, Transient1 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Op returns TwoNumbers
	 *     Op.Op_1_0 returns TwoNumbers
	 *     Term returns TwoNumbers
	 *     Parens returns TwoNumbers
	 *
	 * Constraint:
	 *     (num1=INT num2=INT num3+=INT* em='!'*)
	 */
	protected void sequence_Parens_TwoNumbers(ISerializationContext context, TwoNumbers semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Op returns TypeBug1A
	 *     Op.Op_1_0 returns TypeBug1A
	 *     Term returns TypeBug1A
	 *     Parens returns TypeBug1A
	 *
	 * Constraint:
	 *     (name=ID em='!'*)
	 */
	protected void sequence_Parens_TypeBug1A(ISerializationContext context, TypeBug1A semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Op returns TypeBug1B
	 *     Op.Op_1_0 returns TypeBug1B
	 *     Term returns TypeBug1B
	 *     Parens returns TypeBug1B
	 *
	 * Constraint:
	 *     (name=ID em='!'*)
	 */
	protected void sequence_Parens_TypeBug1B(ISerializationContext context, TypeBug1B semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Op returns TypeBug2A
	 *     Op.Op_1_0 returns TypeBug2A
	 *     Term returns TypeBug2A
	 *     Parens returns TypeBug2A
	 *
	 * Constraint:
	 *     (name=ID em='!'*)
	 */
	protected void sequence_Parens_TypeBug2A(ISerializationContext context, TypeBug2A semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Op returns TypeBug2B
	 *     Op.Op_1_0 returns TypeBug2B
	 *     Term returns TypeBug2B
	 *     Parens returns TypeBug2B
	 *
	 * Constraint:
	 *     (name=ID em='!'*)
	 */
	protected void sequence_Parens_TypeBug2B(ISerializationContext context, TypeBug2B semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Op returns Type
	 *     Op.Op_1_0 returns Type
	 *     Term returns Type
	 *     Parens returns Type
	 *
	 * Constraint:
	 *     (name=ID extends=[Type|ID] em='!'*)
	 */
	protected void sequence_Parens_Type(ISerializationContext context, Type semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Ref2 returns Ref2
	 *
	 * Constraint:
	 *     (ref2='mykeyword1' | ref2=STRING | ref2='mykeyword2')
	 */
	protected void sequence_Ref2(ISerializationContext context, Ref2 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Spare returns Spare
	 *
	 * Constraint:
	 *     (id+=ID id+=ID*)
	 */
	protected void sequence_Spare(ISerializationContext context, Spare semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Transient1 returns Transient1
	 *
	 * Constraint:
	 *     ((precStar?='*' | prec=INT) (scaleStar?='*' | scale=INT)?)
	 */
	protected void sequence_Transient1(ISerializationContext context, Transient1 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TwoNumbers returns TwoNumbers
	 *
	 * Constraint:
	 *     (num1=INT num2=INT num3+=INT*)
	 */
	protected void sequence_TwoNumbers(ISerializationContext context, TwoNumbers semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeBug305577_1 returns TypeBug1A
	 *     TypeBug1A returns TypeBug1A
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_TypeBug1A(ISerializationContext context, TypeBug1A semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimplerewritetestPackage.Literals.TYPE_BUG1_A__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimplerewritetestPackage.Literals.TYPE_BUG1_A__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeBug1AAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TypeBug305577_1 returns TypeBug1B
	 *     TypeBug1AInh returns TypeBug1B
	 *     TypeBug1B returns TypeBug1B
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_TypeBug1B(ISerializationContext context, TypeBug1B semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimplerewritetestPackage.Literals.TYPE_BUG1_A__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimplerewritetestPackage.Literals.TYPE_BUG1_A__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeBug1BAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TypeBug305577_2 returns TypeBug2A
	 *     TypeBug2A returns TypeBug2A
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_TypeBug2A(ISerializationContext context, TypeBug2A semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimplerewritetestPackage.Literals.TYPE_BUG2_A__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimplerewritetestPackage.Literals.TYPE_BUG2_A__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeBug2AAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TypeBug305577_2 returns TypeBug2B
	 *     TypeBug2AInh returns TypeBug2B
	 *     TypeBug2B returns TypeBug2B
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_TypeBug2B(ISerializationContext context, TypeBug2B semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimplerewritetestPackage.Literals.TYPE_BUG2_A__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimplerewritetestPackage.Literals.TYPE_BUG2_A__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeBug2BAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Type
	 *
	 * Constraint:
	 *     (name=ID extends=[Type|ID])
	 */
	protected void sequence_Type(ISerializationContext context, Type semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimplerewritetestPackage.Literals.TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimplerewritetestPackage.Literals.TYPE__NAME));
			if (transientValues.isValueTransient(semanticObject, SimplerewritetestPackage.Literals.TYPE__EXTENDS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimplerewritetestPackage.Literals.TYPE__EXTENDS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getTypeAccess().getExtendsTypeIDTerminalRuleCall_3_0_1(), semanticObject.getExtends());
		feeder.finish();
	}
	
	
}
