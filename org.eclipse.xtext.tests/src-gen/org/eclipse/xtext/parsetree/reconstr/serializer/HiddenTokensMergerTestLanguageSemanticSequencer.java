/*
 * generated by Xtext
 */
package org.eclipse.xtext.parsetree.reconstr.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.parsetree.reconstr.hiddentokenmergertest.Action1;
import org.eclipse.xtext.parsetree.reconstr.hiddentokenmergertest.Action1Sub;
import org.eclipse.xtext.parsetree.reconstr.hiddentokenmergertest.Action1SubClass;
import org.eclipse.xtext.parsetree.reconstr.hiddentokenmergertest.AppendToFileEnd;
import org.eclipse.xtext.parsetree.reconstr.hiddentokenmergertest.AppendToFileEndItem;
import org.eclipse.xtext.parsetree.reconstr.hiddentokenmergertest.Commentable;
import org.eclipse.xtext.parsetree.reconstr.hiddentokenmergertest.CommentableItem;
import org.eclipse.xtext.parsetree.reconstr.hiddentokenmergertest.DatatypeBug286557;
import org.eclipse.xtext.parsetree.reconstr.hiddentokenmergertest.EnumBug;
import org.eclipse.xtext.parsetree.reconstr.hiddentokenmergertest.HiddentokenmergertestPackage;
import org.eclipse.xtext.parsetree.reconstr.hiddentokenmergertest.RefList;
import org.eclipse.xtext.parsetree.reconstr.hiddentokenmergertest.RefObj;
import org.eclipse.xtext.parsetree.reconstr.hiddentokenmergertest.SingleRef;
import org.eclipse.xtext.parsetree.reconstr.hiddentokenmergertest.ValueList;
import org.eclipse.xtext.parsetree.reconstr.services.HiddenTokensMergerTestLanguageGrammarAccess;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class HiddenTokensMergerTestLanguageSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private HiddenTokensMergerTestLanguageGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == HiddentokenmergertestPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case HiddentokenmergertestPackage.ACTION1:
				sequence_Action1(context, (Action1) semanticObject); 
				return; 
			case HiddentokenmergertestPackage.ACTION1_SUB:
				sequence_Action1Sub1(context, (Action1Sub) semanticObject); 
				return; 
			case HiddentokenmergertestPackage.ACTION1_SUB_CLASS:
				sequence_Action1Sub2(context, (Action1SubClass) semanticObject); 
				return; 
			case HiddentokenmergertestPackage.APPEND_TO_FILE_END:
				sequence_AppendToFileEnd(context, (AppendToFileEnd) semanticObject); 
				return; 
			case HiddentokenmergertestPackage.APPEND_TO_FILE_END_ITEM:
				sequence_AppendToFileEndItem(context, (AppendToFileEndItem) semanticObject); 
				return; 
			case HiddentokenmergertestPackage.COMMENTABLE:
				sequence_Commentable(context, (Commentable) semanticObject); 
				return; 
			case HiddentokenmergertestPackage.COMMENTABLE_ITEM:
				sequence_CommentableItem(context, (CommentableItem) semanticObject); 
				return; 
			case HiddentokenmergertestPackage.DATATYPE_BUG286557:
				sequence_DatatypeBug286557(context, (DatatypeBug286557) semanticObject); 
				return; 
			case HiddentokenmergertestPackage.ENUM_BUG:
				sequence_EnumBug(context, (EnumBug) semanticObject); 
				return; 
			case HiddentokenmergertestPackage.REF_LIST:
				sequence_RefList(context, (RefList) semanticObject); 
				return; 
			case HiddentokenmergertestPackage.REF_OBJ:
				sequence_RefObj(context, (RefObj) semanticObject); 
				return; 
			case HiddentokenmergertestPackage.SINGLE_REF:
				sequence_SingleRef(context, (SingleRef) semanticObject); 
				return; 
			case HiddentokenmergertestPackage.VALUE_LIST:
				sequence_ValueList(context, (ValueList) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Action1Sub1 returns Action1Sub
	 *
	 * Constraint:
	 *     {Action1Sub}
	 */
	protected void sequence_Action1Sub1(ISerializationContext context, Action1Sub semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Action1Sub2 returns Action1SubClass
	 *
	 * Constraint:
	 *     {Action1SubClass}
	 */
	protected void sequence_Action1Sub2(ISerializationContext context, Action1SubClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Action1
	 *     Action1 returns Action1
	 *
	 * Constraint:
	 *     (name=ID actions2+=Action1Sub1 actions2+=Action1Sub2)
	 */
	protected void sequence_Action1(ISerializationContext context, Action1 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AppendToFileEndItem returns AppendToFileEndItem
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_AppendToFileEndItem(ISerializationContext context, AppendToFileEndItem semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HiddentokenmergertestPackage.Literals.APPEND_TO_FILE_END_ITEM__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HiddentokenmergertestPackage.Literals.APPEND_TO_FILE_END_ITEM__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAppendToFileEndItemAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns AppendToFileEnd
	 *     AppendToFileEnd returns AppendToFileEnd
	 *
	 * Constraint:
	 *     items+=AppendToFileEndItem+
	 */
	protected void sequence_AppendToFileEnd(ISerializationContext context, AppendToFileEnd semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CommentableItem returns CommentableItem
	 *
	 * Constraint:
	 *     id=ID
	 */
	protected void sequence_CommentableItem(ISerializationContext context, CommentableItem semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HiddentokenmergertestPackage.Literals.COMMENTABLE_ITEM__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HiddentokenmergertestPackage.Literals.COMMENTABLE_ITEM__ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCommentableItemAccess().getIdIDTerminalRuleCall_1_0(), semanticObject.getId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Commentable
	 *     Commentable returns Commentable
	 *
	 * Constraint:
	 *     item+=CommentableItem+
	 */
	protected void sequence_Commentable(ISerializationContext context, Commentable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns DatatypeBug286557
	 *     DatatypeBug286557 returns DatatypeBug286557
	 *
	 * Constraint:
	 *     (name=FQN ref=[DatatypeBug286557|FQN]?)
	 */
	protected void sequence_DatatypeBug286557(ISerializationContext context, DatatypeBug286557 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns EnumBug
	 *     EnumBug returns EnumBug
	 *
	 * Constraint:
	 *     (return=EnumBugEnum name=ID)
	 */
	protected void sequence_EnumBug(ISerializationContext context, EnumBug semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HiddentokenmergertestPackage.Literals.ENUM_BUG__RETURN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HiddentokenmergertestPackage.Literals.ENUM_BUG__RETURN));
			if (transientValues.isValueTransient(semanticObject, HiddentokenmergertestPackage.Literals.ENUM_BUG__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HiddentokenmergertestPackage.Literals.ENUM_BUG__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnumBugAccess().getReturnEnumBugEnumEnumRuleCall_2_0(), semanticObject.getReturn());
		feeder.accept(grammarAccess.getEnumBugAccess().getNameIDTerminalRuleCall_3_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns RefList
	 *     RefList returns RefList
	 *
	 * Constraint:
	 *     (objs+=RefObj* refs+=[RefObj|FQN]*)
	 */
	protected void sequence_RefList(ISerializationContext context, RefList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RefObj returns RefObj
	 *
	 * Constraint:
	 *     name=FQN
	 */
	protected void sequence_RefObj(ISerializationContext context, RefObj semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HiddentokenmergertestPackage.Literals.REF_OBJ__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HiddentokenmergertestPackage.Literals.REF_OBJ__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRefObjAccess().getNameFQNParserRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns SingleRef
	 *     SingleRef returns SingleRef
	 *
	 * Constraint:
	 *     (obj=RefObj ref=[RefObj|FQN])
	 */
	protected void sequence_SingleRef(ISerializationContext context, SingleRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HiddentokenmergertestPackage.Literals.SINGLE_REF__OBJ) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HiddentokenmergertestPackage.Literals.SINGLE_REF__OBJ));
			if (transientValues.isValueTransient(semanticObject, HiddentokenmergertestPackage.Literals.SINGLE_REF__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HiddentokenmergertestPackage.Literals.SINGLE_REF__REF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSingleRefAccess().getObjRefObjParserRuleCall_1_0(), semanticObject.getObj());
		feeder.accept(grammarAccess.getSingleRefAccess().getRefRefObjFQNParserRuleCall_3_0_1(), semanticObject.getRef());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns ValueList
	 *     ValueList returns ValueList
	 *
	 * Constraint:
	 *     ids+=FQN+
	 */
	protected void sequence_ValueList(ISerializationContext context, ValueList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
