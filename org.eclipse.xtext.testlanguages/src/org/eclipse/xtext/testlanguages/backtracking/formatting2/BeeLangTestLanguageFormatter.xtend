/*
 * generated by Xtext
 */
package org.eclipse.xtext.testlanguages.backtracking.formatting2

import com.google.inject.Inject
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.AliasedRequiredCapability
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.Function
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.Model
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.ProvidedCapability
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.RequiredCapability
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.SimpleTypeRef
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.Unit
import org.eclipse.xtext.testlanguages.backtracking.services.BeeLangTestLanguageGrammarAccess

class BeeLangTestLanguageFormatter extends AbstractFormatter2 {
	
	@Inject extension BeeLangTestLanguageGrammarAccess

	def dispatch void format(Model model, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Unit unit : model.getUnits()) {
			unit.format;
		}
		for (Function function : model.getFunctions()) {
			function.format;
		}
	}

	def dispatch void format(Unit unit, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (SimpleTypeRef simpleTypeRef : unit.getImplements()) {
			simpleTypeRef.format;
		}
		for (ProvidedCapability providedCapability : unit.getProvidedCapabilities()) {
			providedCapability.format;
		}
		for (AliasedRequiredCapability aliasedRequiredCapability : unit.getRequiredCapabilities()) {
			aliasedRequiredCapability.format;
		}
		for (RequiredCapability requiredCapability : unit.getMetaRequiredCapabilities()) {
			requiredCapability.format;
		}
		for (Function function : unit.getFunctions()) {
			function.format;
		}
	}
	
	// TODO: implement for ProvidedCapability, AliasedRequiredCapability, RequiredCapability, ParameterList, Parameter, ClosureParameter, ParameterDeclaration, Function, GuardExpression, AssignmentExpression, DefValue, CachedExpression, OrExpression, AndExpression, BinaryOpExpression, UnaryOpExpression, UnaryPreOpExpression, CallFeature, AtExpression, CallFunction, WithExpression, WithContextExpression, ChainedExpression, CallNamedFunction, CreateExpression, UnaryPostOpExpression, FeatureExpression
}
